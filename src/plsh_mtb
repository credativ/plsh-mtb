#!/bin/mksh
#-
# Copyright (c) 2021 Dominik George, credativ GmbH <dominik.george@credativ.de>
# Copyright (c) 2021 Mathis Rudolf, credativ GmbH <mathis.rudolf@credativ.de>
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose, without fee, and without a written agreement
# is hereby granted, provided that the above copyright notice and this
# paragraph and the following two paragraphs appear in all copies.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
# DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
# ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

config_prefix=plsh_mtb
table_prefix=plsh_mtb

bailout() {
    print -ru2 "$*"
    exit 1
}

is_valid_name() {
    # Vreify that argument is a valid name and safe for inserting into psql

    name=$1
    if [[ "$name" = +([A-Za-z0-9_]) ]]; then
	return 0
    else
	bailout "$name is not a valid name"
    fi
}

run_sql() {
    # Pass SQL statement to psql and return result

    sql="$*"

    output=$(psql -AtX -c "$sql" 2>&1) || bailout "$output"
    print -r -- "${output}"
}

get_setting() {
    # Get a system setting from the plsh_mtb prefix

    run_sql "SHOW $config_prefix.$param"
}

get_original_user() {
    # Determine the original user in parent PostgreSQL session

    run_sql "SELECT usename FROM pg_stat_activity WHERE pid=$PPID"
}

is_backup_running() {
    output=$(run_sql "SELECT count(*) FROM ${table_prefix}_backups WHERE state='running'") || \
        bailout "Could not mark backup running"
    
    [[ $output -gt 0 ]] && return 0
    return 1
}

mark_backup_running() {
    started=$1; shift
    filename=$1; shift

    run_sql "INSERT INTO ${table_prefix}_backups (filename, started, state, pid)\
               VALUES('$filename', TO_TIMESTAMP('$started', 'YYYYMMDDHHMISS'), 'running', $$)" || \
        bailout "Could not mark backup running"
}

mark_backup_done() {
    ended=$(date --date=now +%Y%m%d%H%M%S)

    run_sql "UPDATE ${table_prefix}_backups SET \
               ended=TO_TIMESTAMP('$ended', 'YYYYMMDDHHMISS'), \
               state='done', \
               pid=NULL \
             WHERE filename = '${BACKUP_FILE}'" || \
        bailout "Could not mark backup done"
}

mark_backup_failed() {
    ended=$(date --date=now +%Y%m%d%H%M%S)

    run_sql "UPDATE ${table_prefix}_backups SET \
               ended=TO_TIMESTAMP('$ended', 'YYYYMMDDHHMISS'), \
               state='failed', \
               pid=NULL \
             WHERE filename = '${BACKUP_FILE}'" || \
        bailout "Could not mark backup failed"
}

# Start Backup
backup_start() {
    is_backup_running && bailout "Backup already running"

    BACKUP_DB_DIR=${BACKUP_DIR}/${PGDATABASE}
    STARTED=$(date --date=now +%Y%m%d%H%M%S)
    BACKUP_FILE=${STARTED}.sql

    # If compression level is set in the range of 1-9 append gz suffix
    if [[ $COMPRESSION_LEVEL = [1-9] ]]; then
        BACKUP_FILE=${BACKUP_FILE}.gz
    fi

    mkdir -p "${BACKUP_DB_DIR}" || bailout "Could not create backup directory"

    # Insert database entry for running backup
    mark_backup_running ${STARTED} "${BACKUP_FILE}"
    
    # Run backup
    pg_dump -Z ${COMPRESSION_LEVEL} ${PGDATABASE} -f "${BACKUP_DB_DIR}/${BACKUP_FILE}"

    # Check for successful backup
    if [[ $? = 0 ]]; then
	mark_backup_done "${BACKUP_FILE}"
    else
	mark_backup_failed "${BACKUP_FILE}"
	bailout "Backup failed"
    fi
}

# Stop Backup
backup_stop() {

}

#
# Remove Backup
backup_rm() {

}

# Restore Backup
backup_restore() {

}

# Lists Backups and Stats
backup_infos() {

}

# Lists Stats of Current Backup
backup_info() {

}

PG_ORIGINAL_USER=$(get_original_user)
BACKUP_DIR=$(get_setting dir)
COMPRESSION_LEVEL=$(get_setting compression_level)
