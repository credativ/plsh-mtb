#!/bin/mksh
#-
# Copyright (c) 2021 Dominik George, credativ GmbH <dominik.george@credativ.de>
# Copyright (c) 2021 Mathis Rudolf, credativ GmbH <mathis.rudolf@credativ.de>
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose, without fee, and without a written agreement
# is hereby granted, provided that the above copyright notice and this
# paragraph and the following two paragraphs appear in all copies.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
# DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
# ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

config_prefix=plsh_mtb

bailout() {
    print -ru2 "$*"
    exit 1
}

is_valid_name() {
    # Vreify that argument is a valid name and safe for inserting into psql

    name=$1
    if [[ "$name" = +([A-Za-z0-9_]) ]]; then
	return 0
    else
	bailout "$name is not a valid name"
    fi
}

run_sql() {
    # Pass SQL statement to psql and return result

    sql="$*"

    output=$(psql -AtX -c "$sql" 2>&1) || bailout "$output"
    print -r -- "${output}"
}

get_setting() {
    # Get a system setting from the plsh_mtb prefix

    run_sql "SHOW $config_prefix.$param"
}

get_original_user() {
    # Determine the original user in parent PostgreSQL session

    run_sql "SELECT usename FROM pg_stat_activity WHERE pid=$PPID"
}

# Start Backup
backup_start() {
    COMPRESSION_LEVEL=$(get_setting(compression_level))
    BACKUP_DIR="$(get_setting(dir))/${DBNAME}"
    BACKUP_FILE="$(date --date=now +%Y%m%d%H%M%S))"
    BACKUP_FILE_SUFFIX=".sql"
    LOCK_FILE="${BACKUP_DIR}/plsh_mtb.lock"

    # If compression level is set in the range of 1-9 append gz suffix
    if [[ $COMPRESSION_LEVEL = +([1-9]) ]]; then
        $BACKUP_FILE_SUFFIX="${BACKUP_FILE_SUFFIX}.gz"
    fi

    if [[ ! -d ${BACKUP_DIR} ]]; then
        bailout "Backup directory is not initialized."
    fi

    # If lockfile is 
    if [[ -f ${BACKUP_DIR}/${LOCK_FILE} ]]; then
        bailout "Backup already running on given Database."
    fi
    touch ${BACKUP_DIR}/${LOCK_FILE}
    
    # Insert database entry for running backup
    run_sql( \
        "INSERT INTO plsh_mtb_backups \
        VALUES( \
            ${BACKUP_FILE}, \
            TO_TIMESTAMP('${BACKUP_FILE}', 'YYYYMMDDHHMISS'), \
            TO_TIMESTAMP('${BACKUP_FILE}', 'YYYYMMDDHHMISS'), \
            'running');")
    
    # Run backup
    output = $(pg_dump \
        -Z ${COMPRESSION_LEVEL} \
        ${DBNAME} \
        > ${BACKUP_DIR}/${BACKUP_FILE}${BACKUP_FILE_SUFFIX}

    # Check for successful backup
    
    # Update database entry for successful backup
    run_sql( \
        "UPDATE plsh_mtb_backups \
            SET ended=TO_TIMESTAMP('$(date --date=now +%Y%m%d%H%M%S)', 'YYYYMMDDHHMISS'), \
            SET state='done' \
        WHERE filename = ${BACKUP_FILE};)
    
    # Remove lock
    rm ${LOCK_FILE}

    print -r -- "${output}"
}

# Stop Backup
backup_stop() {

}

#
# Remove Backup
backup_rm() {

}

# Restore Backup
backup_restore() {

}

# Lists Backups and Stats
backup_infos() {

}

# Lists Stats of Current Backup
backup_info() {

}

PG_ORIGINAL_USER=$(get_original_user)
