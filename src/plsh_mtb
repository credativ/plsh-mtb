#!/bin/mksh
# -*- mode: sh -*-
#-
# Copyright (c) 2021 Dominik George, credativ GmbH <dominik.george@credativ.de>
# Copyright (c) 2021 Mathis Rudolf, credativ GmbH <mathis.rudolf@credativ.de>
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose, without fee, and without a written agreement
# is hereby granted, provided that the above copyright notice and this
# paragraph and the following two paragraphs appear in all copies.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
# DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
# ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

config_prefix=plsh_mtb
table_prefix=plsh_mtb
backup_cmd_pid=NULL

trap 'kill -STOP $backup_cmd_pid' STOP
trap 'kill -CONT $backup_cmd_pid' CONT

bailout() {
    print -ru2 "$*"
    exit 1
}

run_sql() {
    # Pass SQL statement to psql and return result

    sql="$*"

    output=$(psql -AtX -c "${sql}" 2>&1) || bailout "${output}"
    print -r -- "${output}"
}

get_setting() {
    # Get a system setting from the plsh_mtb prefix

    param=$1

    run_sql "SHOW ${config_prefix}.${param}"
}

get_running_pid() {
    # Get the PID of the one currently running/stopped backup

    run_sql "SELECT pid FROM ${table_prefix}_backups WHERE state IN ('running', 'stopped')"
}

get_backup_file_by_pid() {
    # Get the filename of a running/stopped backup by its PID
    # FIXME Probably unnecessary as we can only have one running backupâ€¦

    pid=${1}

    output=$(run_sql "SELECT filename FROM ${table_prefix}_backups WHERE pid=${pid}")

    [[ -n ${output} ]] || bailout "Filename for PID ${pid} not found"
    print -r -- "${output}"
}

is_pid_backup_process() {
    # Check that a PID is a running backup process

    pid=$1

    if [[ ! -d /proc/${pid} ]]; then
	# Process does not exist at all
	backup_file=$(get_backup_file_by_pid ${pid})
	mark_backup_ended failed "${backup_file}"
	return 1
#    elif .; then
#        # FIXME check cmdline, whatever
#        return 1
    fi

    return 0
}

is_backup_running() {
    # Check whether a backup is running

    pid=$(get_running_pid)

    [[ -n ${pid} ]] && return 0
    return 1
}

mark_backup_running() {
    # Register a new running backup

    backup_file=${1};

    run_sql "UPDATE ${table_prefix}_backups SET \
               state='running'
             WHERE filename = '${backup_file}'" || \
        bailout "Could not mark backup stopped"
}

mark_backup_done() {
    # Mark a backup with a state other than running

    backup_file=${1}
    ended=$(date --date=now +%Y%m%d%H%M%S)

    run_sql "UPDATE ${table_prefix}_backups SET \
               ended=TO_TIMESTAMP('${ended}', 'YYYYMMDDHH24MISS'), \
               state='done', \
               pid=NULL \
             WHERE filename = '${backup_file}'" || \
        bailout "Could not mark backup ${state}"
}

mark_backup_aborted() {
    # Mark a backup with a state other than running

    backup_file=${1}
    ended=$(date --date=now +%Y%m%d%H%M%S)

    run_sql "UPDATE ${table_prefix}_backups SET \
               ended=TO_TIMESTAMP('${ended}', 'YYYYMMDDHH24MISS'), \
               state='aborted', \
               pid=NULL \
             WHERE filename = '${backup_file}'" || \
        bailout "Could not mark backup ${state}"
}

mark_backup_stopped() {
    # Mark a backup with a state other than running

    backup_file=$1

    run_sql "UPDATE ${table_prefix}_backups SET \
               state='stopped' \
             WHERE filename = '${backup_file}'" || \
        bailout "Could not mark backup stopped"
}

backup_start() {
    # Start a new backup

    is_backup_running && bailout "Backup already running"

    backup_db_dir=${BACKUP_DIR}/${PGDATABASE}
    started=$(date --date=now +%Y%m%d%H%M%S)
    backup_file=${started}

    mkdir -p "${backup_db_dir}" || bailout "Could not create backup directory"

    backup_cmd=${DUMP_CMD}
    backup_cmd=${backup_cmd/PGDATABASE/${PGDATABASE}}
    backup_cmd=${backup_cmd/BACKUPFILE/${backup_db_dir}\/${backup_file}}

    # Insert database entry for running backup
    run_sql "INSERT INTO ${table_prefix}_backups (filename, started, state, pid)\
               VALUES('${backup_file}', TO_TIMESTAMP('${started}', 'YYYYMMDDHH24MISS'), 'running', $$)" || \
        bailout "Could not mark backup running"

    # Run backup
    ${backup_cmd} &

    # Save pid of backup-command
    backup_cmd_pid=$!

    # Wait for backup-command to finish
    wait ${backup_cmd_pid}

    # Check for successful backup
    if [[ $? = 0 ]]; then
	mark_backup_done "${backup_file}"
    else
	mark_backup_failed "${backup_file}"
	bailout "Backup failed"
    fi
}

backup_kill() {
    # Send a signal to a running backup process and mark backup accordingly

    signal=$1; shift
    state=$1; shift

    is_backup_running || bailout "No backup to kill"
    pid=$(get_running_pid)

    is_pid_backup_process ${pid} || bailout "${pid} is not a backup process"
    
    kill -CONT ${pid}
    kill -${signal} ${pid}

    backup_file=$(get_backup_file_by_pid ${pid})

    case "${state}" in
        (running|stopped|done|aborted) mark_backup_${state} "${backup_file}";;
        (*) bailout "Unknown state ${state}" ;;
    esac
}

backup_abort() {
    # Abort a running backup

    backup_kill TERM aborted
}

backup_stop() {
    # Preempt a running backup

    backup_kill STOP stopped
}

backup_continue() {
    # Continue a prveiously preempted backup

    backup_kill CONT running
}

BACKUP_DIR=$(get_setting dir)
DUMP_CMD=$(get_setting dump)
LOGFILE=$(get_setting log)

action=$1

case "$action" in
    (start|stop|continue|abort) backup_${action} ;;
    (*) bailout "Unknown action ${action}" ;;
esac

exit 0
